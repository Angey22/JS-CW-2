/*
* Метод "Array.from()"
*/
// Метод "Array.from()" создаёт новый экземпляр (делает полную отдельную копию) из массива или любого другого массивоподобного и/или итерируемого объекта.

const arr = [1, 2, 3];
const arr2 = Array.from(arr); // Делаем полную копию массива "arr"

console.log(arr, arr2);

arr[1] = 55;
arr2[0] = 33;

console.log(arr, arr2);
console.log(arr === arr2);


/*
* Еще один метод создания нового массива из существующего основан на использовании метода "slice()"
*/

const arr3 = [5, 6, 7];
const arr4 = arr3.slice(0); // Делаем полную копию массива "arr3"

console.log(arr3, arr4);

arr3[1] = 77;
arr4[0] = 55;

console.log(arr3, arr4);
console.log(arr3 === arr4);

/*
* Приме нахождения индекса "пустого элемента" в массиве
*/

const arr5 = [1, 2, , 4, , 6]; // Создали массив с 2-я "пустыми" элементами внутри

const indexesOfEmptyElements = []; // Переменная-массив для записи индексов "пустых" элементов.

// Создаем цыкл для перебора всех элементов массива
for (let i = 0; i < arr5.length; i++) {
    // Задаем условия нахождения "пустых" элементов массива (в них по умолчанию записывается служебный тип данных "undefined") 
    if (typeof arr5[i] === 'undefined') { indexesOfEmptyElements.push(i); }
}
// Выводим в "лог" массив со значениями пустых индексов заданного в цыкл массива
console.log(indexesOfEmptyElements);


/*
* Разница между операторами "break" и "continue"
*/
// "break" - предназначен для остановки выполнения цыкла на соответствующей его итерации.

// Массив для илюстрации примеров
const arr6 = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

// Например, у нас есть некий массив "arr6" и нам необходимо выполнить операцию перебора цыклом его элементов таким образом, чтобы на определенной итерации - остановить работу цикла.

// Обозначаем начало работы цыкла
console.log('"Start" работы цыкла - "break":');

// Создаем цыкл для перебора всех элементов массива "arr6"
for (let i = 0; i < arr6.length; i++) {
    
    // Задаем условие, при котором должен сработать оператор "break"
    if (arr6[i] === 5) break;

    // Выводим в консоль информацию об каждой, отдельно выполненной итерации цыкла
    console.log(`- ${i + 1}-я итерация цыкла;`);
}

// Обозначаем конец работы цыкла
console.log('"End" работы цыкла - "break".');


// "continue" - предназначен для организации -> "пропуска выполнения" определенной итерации цыкла. Его использование позволяет пропустить одно или любое другое нужное количество итераций цыкла по условию

// Например, у нас есть некий массив "arr6" и нам необходимо выполнить операцию перебора цыклом его элементов таким образом, чтобы выполнение определенной итерации - было пропущено, а цыкл, пропустив ее - продолжил свою работу.

// Обозначаем начало работы цыкла
console.log('"Start" работы цыкла - "continue":');

// Создаем цыкл для перебора всех элементов массива "arr6"
for (let i = 0; i < arr6.length; i++) {
    
    // Задаем условие, при котором должен сработать оператор "continue"
    if (arr6[i] === 5) continue;

    // Выводим в консоль информацию об каждой, отдельно выполненной итерации цыкла
    console.log(`- ${i + 1}-я итерация цыкла;`);
}

// Обозначаем конец работы цыкла
console.log('"End" работы цыкла - "continue".');


/*
* Методы "padStart()" и "padEnd()"
*/
// Предназначены для заполнения неким "известным", предварительно "заданным" набором символов строку в начале (padStart) и конце (padEnd).

// Строка для илюстрации примеров
const string = '-aBcD-';

// Например, нам нужно в НАЧАЛО строки находящейся в переменной "string" - добавить некий заранее известный набор символов.
console.log('Добавляем в НАЧАЛО строки ->', string.padStart(10, '0235'));

// Например, нам нужно в КОНЕЦ строки находящейся в переменной "string" - добавить некий заранее известный набор символов.
console.log('Добавляем в КОНЕЦ строки ->', string.padEnd(10, '0235'));

// Особенностью использования данных методов является то, что при их использовании нужно заранее знать и указать в соответствующих параметрах: итоговую длину строки с заданым "добавлением", и сами символы "добавления".
// Синтаксис - слово ключ метода (padStart или padEnd) указывающее на необходимость "добавления" символов в "начале" или "конце" соответствующей строки, и скобки внутри которых задаются параметры ([общее количество символов в итоговой строке], [набор "добавляемых" в строку символов]).
