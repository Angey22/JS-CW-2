/*
 * Напиши скрипт автоматического поиска логина в базе данных (задача):
 * - если искомого логина в существующей базе данных нет, тогда скрипт должен вывести сообщение 'Пользователь [логин] не найден';
 * - если - логин есть (был найден в базе данных), необходимо вывести сообщение 'Пользователь [логин] найден'.
 *  Методы реализации задачи:
 * - используя цыкл "for";
 * - используя цыкл "for...of";
 * - используя логику прерывния работы цикла через "break";
 * - используя метод includes() с тернарным оператором.
 */
// Исходные данные для решения задачи: массив "logins" с перечнем существующих логинов (где массив имитирует базу данных); переменная "loginToFind" с логином подлежащему поиску.
const logins = ['m4ngoDoge', 'k1widab3st', 'poly1scute', 'aj4xth3m4n']; // Массив - "база данных"
const loginToFind = 'aj4xth3m4n'; // "Введенный пользователем искомый логотип"
let message = ''; // Дополнительная переменная для вывода последующего вывода сообщения

// 1-й вариант решения задачи:
// 1. Создаем цикл "for" для перебора значений массива
for (let i = 0; i < logins.length; i += 1) {
  // 2. Создаем внутри цыкла локальную переменную, внутри которой записываем значение элемента цикла (варианты логинов), при каждой его итерации
  const login = logins[i];

  // 3. Производим проверку на совпадение искомого логина (записываемого в локальную переменную0) с имеющимися в базе данных
  if (login === loginToFind) {

    // 4.1. Задаем параметры сообщения при обнаружении совпадения (нахождения искомого логина в базе данных)
    message = `Пользователь "${loginToFind}" найден`;

    // 5. Прерываем выполнение цыкла при обнаружении искомого совпадения (нахождения искомого логина в базе данных)
    break; 
  }

  // 4.2. Задаем параметры сообщения при отсутствии совпадения (НЕ нахождении искомого логина в базе данных)
  message = `Пользователь "${loginToFind}" не найден`;
  // Код пункта "4.2" - можно расположить и перед циклом "for". При этом логика работы скрипта будет следующей - по умолчанию логин искомого пользователя (дефолтное значение) - "не найден", и только при его нахождении в масиве - сообщение меняется на "найден".
}

// 6. Выводим итоговое сообщение о результатах работы скрипта
console.log('(1-й вариант решения задачи) =>', message);


// 2-й вариант решения задачи:
// 1.1. Задаем параметры сообщения при отсутствии совпадения (НЕ нахождении искомого логина в базе данных) - по умолчанию
let message2 = `Пользователь "${loginToFind}" не найден`;

// 2. Создаем цикл "for...of" для перебора значений массива
for (const login of logins) {
  // 3. Производим проверку на совпадение искомого логина (записываемого в локальную переменную) с имеющимися в базе данных
  if (login === loginToFind) {
    // 1.2. Задаем параметры сообщения при обнаружении совпадения (нахождения искомого логина в базе данных)
    message2 = `Пользователь "${loginToFind}" найден`;

    // 4. Прерываем выполнение цыкла при обнаружении искомого совпадения (нахождения искомого логина в базе данных)
    break;
  }
}

// 5. Выводим итоговое сообщение о результатах работы скрипта
console.log('(2-й вариант решения задачи) =>', message2);


// 3-й вариант решения задачи:
// 1. Создаем переменную "messge3", и задаем ей значение с использованием тернарного оператора, с применением метода includes() для проверки наличия искомого логина в массиве
const message3 = logins.includes(loginToFind)
  ? `Пользователь "${loginToFind}" найден`
  : `Пользователь "${loginToFind}" не найден`;

// 2. Выводим итоговое сообщение о результатах работы скрипта
console.log('(3-й вариант решения задачи) =>', message3);

// Особенностью решения соответствующей задачи 3-м способом является то, что в нем был использован "декларативный код", который не описывает всех нюансов проводимой внутренней работы скрипта, а основываясь на существующих методах JS - упрощенным способом (обстрактным способом), позволяет описать необходимую логику работы.
// 3-й вариант решения задачи - считается самым лучшим, т.к.: 1) В его написании использовано меньше кода; 2) В его реализации использован "новый", более современный и упрощенный вид записи оператора "if" - "тернарный оператор".
// Нужно отметить, что с каждым годом - появляются новые синтаксические конструкции внутри языка JS, которые позволяют более эффективно решать (с использованием меньшего количества кода) типовые логические задачи.